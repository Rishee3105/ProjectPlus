// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Register
// Input:
// firstName , lastName , email , password , Role , only college id will be accepted , Department , Institute 
// Email Id Format : 22ce069@charusat.edu.in , For Faculty : ronalrpatel.ce@charusat.ac.in

// Signin
// email id (Charusat) , password

// User Profile
// Domain , skills , About Me , Experience (Internship) , Achievements , Projects , Social Links , Projects Links , Certificates , Curr CGPA , Contact Info , Profile Photo 
model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  firstName  String
  lastName   String
  password   String
  role       UserRole
  charusatId String   @unique
  institute  String
  department String

  domain       String? // Domain of expertise
  aboutMe      String? // Brief introduction
  currCgpa     Float? // Current CGPA
  phoneNumber  String? // Contact number
  profilePhoto String? // URL to profile photo

  // Relationships for complex data
  skills       UserSkill[] // Skills linked to the user
  experiences  Experience[] // Experiences linked to the user
  projects     UserProject[] // past Projects linked to the user
  certificates Certificate[] // Certificates linked to the user

  // Embedded data for simple lists
  currWorkingProjects String[]
  achievements        String[] // Array of achievements
  socialLinks         String[] // Array of social media links

  prequests        prequest[] // Relation to prequest
  verificationCode String?
  expiresAt        DateTime?

  @@index([firstName, lastName]) // Index for name-based searches
  @@index([email, domain, role]) // Index for frequently filtered fields
  @@map("users")
}

model UserSkill {
  id     Int    @id @default(autoincrement())
  userId Int
  skill  String // Skill name

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, skill]) // Prevent duplicate skills for the same user
}

model Experience {
  id          Int    @id @default(autoincrement())
  userId      Int
  title       String
  company     String
  duration    String // E.g., "3 months", "1 year"
  description String

  user User @relation(fields: [userId], references: [id])
}

model UserProject {
  id      Int     @id @default(autoincrement())
  userId  Int
  title   String
  link    String? // Optional URL to the project
  details String? // Optional description

  user User @relation(fields: [userId], references: [id])
}

model Certificate {
  id     Int     @id @default(autoincrement())
  userId Int
  title  String
  url    String?

  user User @relation(fields: [userId], references: [id])
}

enum UserRole {
  STUDENT
  FACULTY
}

model Project {
  id             Int            @id @default(autoincrement())
  pname          String
  pdescription   String
  pdefinition    String
  phost          String
  teamSize       Int
  members        Member[]
  mentors        Mentor[]
  pduration      Int // Duration in months
  documentation  String[] // Links to documentation
  deleteDocs     String[] // Links to documentation
  requiredDomain String[]
  techStack      String[]
  rating         Float? // Optional rating
  prequest       prequest[]
  suggestions    Suggestion[] // Linked suggestions with time tracking
  projectPrivacy ProjectPrivacy
  upvotes        Int            @default(0)
  status         ProjectStatus? @default(Active)

  @@index([pname, phost]) // Optimized for search by project name and host
}

enum ProjectStatus {
  Active
  Completed
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model prequest {
  id        Int           @id @default(autoincrement())
  status    RequestStatus
  userId    Int           // ID of the user who made the request
  projectId Int
  project   Project       @relation(fields: [projectId], references: [id])
  user      User          @relation(fields: [userId], references: [id])

  @@unique([userId, projectId])  // Added unique constraint
  @@index([userId, projectId])
}

model Member {
  id         Int     @id @default(autoincrement())
  charusatId String
  role       String // Role in the project
  projectId  Int
  project    Project @relation(fields: [projectId], references: [id])

  @@unique([charusatId, projectId]) // Ensure user can only join a project once
  @@index([charusatId]) // Optimized for checking availability of members
}

// Add email-Id in this mentor table
model Mentor {
  id         Int     @id @default(autoincrement())
  charusatId String  @unique
  name       String
  emailId    String  @unique
  projectId  Int
  project    Project @relation(fields: [projectId], references: [id])

  @@index([charusatId]) // Optimized for mentor lookups
}

model Suggestion {
  id        Int      @id @default(autoincrement())
  content   String // Suggestion text
  createdAt DateTime @default(now()) // Timestamp for suggestion creation
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id])

  @@index([projectId, createdAt]) // Optimized for retrieving suggestions by project and time
}

enum ProjectPrivacy {
  PUBLIC_FOR_ALL
  PUBLIC_FOR_CHARUSAT
  PRIVATE
}
